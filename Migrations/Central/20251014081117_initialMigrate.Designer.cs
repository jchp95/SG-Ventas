// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ventas.Context;

#nullable disable

namespace ventas.Migrations.Central
{
    [DbContext(typeof(CentralDbContext))]
    [Migration("20251014081117_initialMigrate")]
    partial class initialMigrate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbAuditoria", b =>
                {
                    b.Property<int>("FidAuditoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_auditoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidAuditoria"));

                    b.Property<string>("Faccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("faccion");

                    b.Property<DateTime>("Ffecha")
                        .HasColumnType("Date")
                        .HasColumnName("ffecha");

                    b.Property<string>("Fhora")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fhora");

                    b.Property<int>("FkidRegistro")
                        .HasColumnType("int")
                        .HasColumnName("fkid_registro");

                    b.Property<int>("FkidUsuario")
                        .HasColumnType("int")
                        .HasColumnName("fkid_usuario");

                    b.Property<string>("Ftabla")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ftabla");

                    b.HasKey("FidAuditoria");

                    b.ToTable("tb_auditoria", (string)null);
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbConexion", b =>
                {
                    b.Property<int>("FidConexion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_conexion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidConexion"));

                    b.Property<string>("FnombreBd")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre_base_datos");

                    b.HasKey("FidConexion");

                    b.ToTable("tb_conexion", (string)null);
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbEmpresa", b =>
                {
                    b.Property<int>("FidEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_empresa");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidEmpresa"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Femail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("femail");

                    b.Property<string>("Feslogan")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("feslogan");

                    b.Property<int>("FkidConexion")
                        .HasColumnType("int")
                        .HasColumnName("fkid_conexion");

                    b.Property<string>("Flogo")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasColumnName("flogo");

                    b.Property<string>("FnombreEmpresa")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("fnombre_empresa");

                    b.Property<string>("Frnc")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("frnc");

                    b.HasKey("FidEmpresa");

                    b.HasIndex("FkidConexion");

                    b.ToTable("tb_empresa", (string)null);
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbMoneda", b =>
                {
                    b.Property<int>("FidMoneda")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_moneda");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidMoneda"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Fmoneda")
                        .IsRequired()
                        .HasColumnType("varchar(10)")
                        .HasColumnName("fmoneda");

                    b.Property<string>("Fsimbolo")
                        .IsRequired()
                        .HasColumnType("varchar(5)")
                        .HasColumnName("fsimbolo");

                    b.HasKey("FidMoneda");

                    b.ToTable("tb_moneda", (string)null);
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbUsuarioCentral", b =>
                {
                    b.Property<int>("FidUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("fid_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FidUsuario"));

                    b.Property<bool>("Factivo")
                        .HasColumnType("bit")
                        .HasColumnName("factivo");

                    b.Property<string>("Femail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("femail");

                    b.Property<int>("FkidEmpresa")
                        .HasColumnType("int")
                        .HasColumnName("fkid_empresa");

                    b.Property<int>("Fnivel")
                        .HasColumnType("int")
                        .HasColumnName("fnivel");

                    b.Property<string>("Fnombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("fnombre");

                    b.Property<string>("FnombreUsuario")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("fnombre_usuario");

                    b.Property<string>("Fpassword")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("fpassword");

                    b.Property<string>("IdentityId")
                        .HasColumnType("varchar(450)")
                        .HasColumnName("identity_id");

                    b.HasKey("FidUsuario");

                    b.HasIndex("FkidEmpresa");

                    b.ToTable("tb_usuario_central", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbEmpresa", b =>
                {
                    b.HasOne("ventas.Models.ModelsBdCentral.TbConexion", null)
                        .WithMany()
                        .HasForeignKey("FkidConexion")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ventas.Models.ModelsBdCentral.TbUsuarioCentral", b =>
                {
                    b.HasOne("ventas.Models.ModelsBdCentral.TbEmpresa", null)
                        .WithMany()
                        .HasForeignKey("FkidEmpresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
